#!/bin/ksh

# Copyright (c) 2010,2011,2012 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

alloc_if() {
	local i=0 type=$1
	# creation is atomic
	while ! ifconfig $type$i create > /dev/null 2>&1
	do
		let i=i+1
	done
	echo $type$i
}

# sample config:

# # non root user to run as
# user _mopd
# 
# # template hard drive name
# template template.hd
# 
# # host <name> <mem> [<vlan> [<vlan> [..]]]
# 
# # Vlans for setting up tun/bridge between qemu sessions
# #   NOTE: vlan 0 is reserved for access to all systems from the host system
# #  1 - westint
# #  2 - westext
# #  3 - eastext
# #  4 - eastint
# 
# host c-w  32m 1
# host fw-w 64m 1 2
# host r    32m 2 3
# host fw-e 64m 3 4
# host c-e  32m 4
# #host c-e1  32m 3
# #host c-e2  32m 3
# #host c-e3  32m 3
# #host c-e4  32m 3
# #host c-e5  32m 3
# #host c-e6  32m 3
#
# # native <physical interface> <vlan> [<vlan> [<vlan> [..]]]
# #native em0 0
# #native em1 1
# #native em2 2



loadconf() {
	local conf="$1"
	temphd=$(sed -e 's/#.*//' \
				-e '/^[::space::]*$/d' \
				-e '/^template /!d' \
				-e 's/^template //' $conf)
	if [ "$temphd" ]; then
		templatehd="$temphd"
	fi
	utmp=$(sed -e 's/#.*//' \
				-e '/^[::space::]*$/d' \
				-e '/^user /!d' \
				-e 's/^user //' $conf)
	if [ "$utmp" ]; then
		user="$utmp"
	fi
	default=$(sed -e 's/#.*//' \
				-e '/^[::space::]*$/d' \
				-e '/^default /!d' \
				-e 's/^default //' $conf)
	case "$default" in
	start) default="";;
	*) default="-S";;
	esac

	set -A hosts
	set -A mds
	set -A hostmem
	totalhosts=0

	c=0
	for line in $(sed -e 's/#.*//' \
	    -e '/^[::space::]*$/d' \
	    -e '/^host /!d' \
	    -e 's/^host //' \
	    -e 's/ /_/g' $conf)
	do
		i=0
		local v
		let v=c
		let c=c+1
		#echo "parsing $line"
		set -A hostinfo $(echo "$line"| sed 's/_/ /g')
		hdlist=""
		while [ i -lt ${#hostinfo[*]} ]
		do
			hi="${hostinfo[$i]}"
			let i=i+1
			#echo "v=$v c=$c i=$i hostinfo=$hi"
			if [ i -eq 1 ]; then
				hosts[$v]=$hi
				continue
			fi
			if [ i -eq 2 ]; then
				hostmem[$v]=$hi
				continue
			fi
			hdlist="$hdlist $hi"
		done
		vlans[$v]=$hdlist
	done
	c=0
	for line in $(sed -e 's/#.*//' \
	    -e '/^[::space::]*$/d' \
	    -e '/^native /!d' \
	    -e 's/^native //' \
	    -e 's/ /_/g' $conf)
	do
		i=0
		local v
		let v=c
		let c=c+1
		set -A hostinfo $line
		vlist=""
		while [ i -lt ${#hostinfo[*]} ]
		do
			vi="${hostinfo[$i]}"
			let i=i+1
			if [ i -eq 1 ]; then
				nativeint[$c]=$vi
				continue
			fi
			vlist="$vlist $vi"
		done
		nativevlan[$c]=$vlist
	done
}

user=_qemu

if [ "$1" -a -f "$1" ]; then
	loadconf "$1"
else
	loadconf cfg
fi

qrun=/usr/local/sbin/qrun
baseport=30000
baseportoff=256 # limits qemu instance count
i=0
set -A dim $(xdpyinfo | awk '/dimensions:/ {sub("x"," ",$2);print $2;}')

conserver=0
#typeset -i16 x

if [ conserver -gt 0 ]; then
	echo "default local {"
	echo "               type host; host 127.0.0.1; portbase $baseport; portinc 1;"
	echo "}"
fi

openterms() {
	local host=$1
	local xinc=$((${dim[0]}/5+10))
	local yinc=$((${dim[1]}/(${#hosts[*]}+2)))
	local xoff=0
	local yoff=$((yinc*host))
	local ytext=$((yinc/7 - 1))
	local xtext=$(((xinc*5-1)/2/6-5))
	if [ xtext -gt 80 ]; then
		xtext=80
		let xinc2=xinc+405
	else
		xinc2=$(( (${dim[0]}-xinc)/2 ))
	fi
	xterm -T "${hn} monitor" \
		-xrm "xterm.vt100.geometry: 42x${ytext}+${xoff}+${yoff}" \
		-e sh -c \
		"while read blah; do console ${hn}.mon; sleep 5; done" &
	let xoff=xinc
	xterm -T "${hn} console" \
		-xrm "xterm.vt100.geometry: ${xtext}x${ytext}+${xoff}+${yoff}" \
		-e sh -c \
		"while read blah; do console ${hn}; sleep 5; done" &
	let xoff=xinc2
	xterm -T "${hn} console" \
		-xrm "xterm.vt100.geometry: ${xtext}x${ytext}+${xoff}+${yoff}" \
		-e sh -c \
		"while read blah; do ssh root@fe80::5054:1ff:fe00:$(printf "%02x%02x" $i 0)%trunk128; sleep 5; done" &
}
	

while [ i -lt ${#hosts[*]} ]
do
	hn=${hosts[$i]}
	#echo "$i: Hostname: $hn Memory: ${hostmem[$i]} Vlans: ${vlans[$i]}"
	if ! [ -f ${hn}.hd ]; then
		qemu-img create -b $templatehd -f qcow2 ${hn}.hd
	fi

	#openterms $i

	# Do not start qemu if something is already using the hd image
	l=$(fstat ${hn}.hd | wc -l)
	if [ l -gt 1 ]; then
		let i=i+1
		continue
	fi
	serport=$((i+baseport))
	monport=$((i+baseport+baseportoff))
	if [ conserver -gt 0 ]; then
		echo "console $hn { include local; port $i; }"
		echo "console ${hn}.mon { include local; port $((i+baseportoff)); }"
	fi
	x=$i

	set -A myvlans 0 $(echo ${vlans[$i]} | sed 's/  / /g;s/^ //')
	vlan=0
	netargs=""
	while [ vlan -lt ${#myvlans[*]} ]
	do
		thisvlan=${myvlans[$vlan]}

		netargs="$netargs -o bridge=group:vlan${thisvlan}.,model=rtl8139,macaddr=52:54:01:00:$(printf "%02x" $x):$(printf "%02x" $vlan)"
		echo "$hn: group:vlan${thisvlan}. <-> $thisvlan"
		let vlan=vlan+1
	done

	chown $user ${hn}.hd $templatehd
	qrun -u $user \
		$netargs \
		-m ${hostmem[$i]} \
		-i `pwd`/${hn}.hd \
		-o console=com0 \
		-serial telnet:127.0.0.1:$serport,server,nowait \
		-monitor telnet:127.0.0.1:$monport,server,nowait \
		$default \
		-daemonize
	let i=i+1
done

# setup native ethernet ports to the virtual network
while [ i -lt ${#nativeint[*]} ]
do
	vn=${nativeint[$i]}
	set -A myvlans ${nativevlan[$i]}
	vlan=0
	while [ vlan -lt ${#myvlans[*]} ]
	do
		thisvlan=${myvlans[$vlan]}

		bridgeif=$(alloc_if bridge)
		ifconfig $bridgeif add $vn
		ifconfig $bridgeif add ${vlanif[$thisvlan]} up
		let vlan=vlan+1
	done
done
