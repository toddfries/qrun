#!/bin/sh

# Copyright (c) 2010 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

imagesize="16G"
memsize=""
verbose=0

set -A hexdig 0 1 2 3 4 5 6 7 8 9 a b c d e f

alloc_if() {
	local i=0 type=$1
	# creation is atomic
	while ! ifconfig $type$i create > /dev/null 2>&1
	do
		let i=i+1
	done
	case "$type" in
	tun)
		if ! [ -c /dev/$type$i ]; then
		(
			cd /dev
			sh ./MAKEDEV $type$i
		)
		fi
	;;
	esac
	echo $type$i
}

vlancount=0
while [ "$1" ]
do
	case "$1" in
	-b) bridge[$vlancount]="$2"; let vlancount=vlancount+1; shift;;
	-C) cd="$2"; shift;;
	-c) cd="$2";cdboot=1; shift;;
	-i) image="$2"; shift;;
	-M) mode="$2"; shift;;
	-m) memsize="-m $2"; shift;;
	-n) netcfg="$2"; shift;;
	-s) imagesize="$2"; shift;;
	-o)
		case "$2" in
		bridge*) # bridge=ne0,model=rtl8139,macaddr=52:54:01:00:XX:XX
			for pairs in $(echo "$2" | sed 's/,/ /g')
			do
				rhs=${pairs#*=}
				lhs=${pairs%=*}
				case "$lhs" in
				bridge)
					bridge[$vlancount]="$2"
				;;
				model)
					model[$vlancount]="$2"
				;;
				macaddr)
					mac="$2"
					while echo "$mac" | grep "XX" > /dev/null 2>&1
					do
						xx=${hexdig[$((RANDOM%16))]}
						xx=$xx${hexdig[$((RANDOM%16))]}
						mac=$(echo "$mac" | sed "s/XX/$xx/")
					done
					macaddr[$vlancount]="$2"
				;;
				*)
					echo "Oops, $lhs=$rhs unsupported"
				;;
				esac
			done
			let vlancount=vlancount+1
		;;
		esac
		shift
	;;
	-u) user="$2"; shift;;
	-v) let verbose=verbose+1;;
	--) shift;break;;
	*) break;;
	esac
	shift
done


if ! [ "$image" ]; then
	echo "No hard drive image specified, use '-img foo.hda' for example"
	exit 1
fi

if ! [ -f "$image" ]; then
	qemu-img create -f qcow2 $image $imagesize
fi

if [ "$netcfg" -a "${bridge[0]}" ]; then
	echo "Impossible, mixing routing and bridging"
	exit 1
fi

args=""

if [ "$cd" -a -f "$cd" ]; then
	args="$args -cdrom $cd"
fi
if [ "$cdboot" ]; then
	args="$args -boot d"
fi

args="$args -hda $image -no-fd-bootchk"
args="$args -monitor stdio"
if [ "${bridge[0]}" ]; then
	vlan=0
	while [ vlan -lt vlancount ]
	do
		fd=$((vlan+3))
		args="$args -net nic,vlan=$vlan -net tap,vlan=$vlan,fd=$fd"

		bridgeif[$vlan]=$(alloc_if bridge)

		tunif[$vlan]=$(alloc_if tun)
		ifconfig ${tunif[$vlan]} link0
		ifconfig ${tunif[$vlan]} up

		ifconfig ${bridgeif[$vlan]} add ${tunif[$vlan]}
		ifconfig ${bridgeif[$vlan]} add ${bridge[vlan]}
		ifconfig ${bridgeif[$vlan]} up
		let vlan=vlan+1
	done
else
	if [ "$netcfg" ]; then
		args="$args -net nic,vlan=0 -net tap,vlan=0,fd=3"
		tunif[0]=$(alloc_if tun)
		ifconfig ${tunif[0]} link0
		ifconfig ${tunif[0]} $netcfg
		ifconfig ${tunif[0]} up
	fi
fi
qemu="qemu"
if [ "$mode" ]; then
	case "$mode" in
	amd64) qemu="qemu-system-x86_64";;
	esac
fi

if [ verbose -gt 0 ]; then
	echo "=> $qemu $args $@"
fi

rdrargs=""
if [ "$user" ]; then
	chown $user $image
	vlan=0
	while [ vlan -lt vlancount ]
	do
		if [ "${tunif[$vlan]}" ]; then
			rdrargs="$rdrargs -f /dev/${tunif[$vlan]}"
		fi
		let vlan=vlan+1
	done
	fdpass -u $user $rdrargs $qemu $args "$@"
else
	vlan=0
	while [ vlan -lt vlancount ]
	do
		if [ "${tunif[$vlan]}" ]; then
			rdrargs="$rdrargs $((vlan+3))<>/dev/${tunif[$vlan]}"
		fi
		let vlan=vlan+1
	done
	$qemu $args "$@" $rdrargs
fi

vlan=0
while [ vlan -lt vlancount ]
do
	if [ "${bridgeif[$vlan]}" ]; then
		ifconfig ${bridgeif[$vlan]} delete ${tunif[$vlan]}
	fi

	if [ "${tunif[$vlan]}" ]; then
		ifconfig ${tunif[$vlan]} down
		ifconfig ${tunif[$vlan]} destroy
	fi

	if [ "${bridgeif[$vlan]}" ]; then
		ifconfig ${bridgeif[$vlan]} down
		ifconfig ${bridgeif[$vlan]} destroy
	fi
	let vlan=vlan+1
done
