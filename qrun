#!/bin/ksh

# Copyright (c) 2010,2011,2012 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

args=""
args="$args -rtc base=utc"
console="-monitor stdio"
console=""
imagesize="16G"
image=""
diskcount=0
memsize=""
verbose=0
tunfd=3     # allocate fd's since -net user will cause them to be off by one
vlancount=0
uid=$(id -u)
mode=i386

set -A hexdig 0 1 2 3 4 5 6 7 8 9 a b c d e f

root_check() {
	if (( uid != 0 )); then
		print "FATAL: Option -$1 requires root privileges"
		exit 1
	fi
}

alloc_if() {
	local i=0 type=$1

	# creation is atomic
	while ! ifconfig $type$i create > /dev/null 2>&1
	do
		((i++))
	done
	case "$type" in
	tun)
		if ! [ -c /dev/$type$i ]; then
		(
			cd /dev
			sh ./MAKEDEV $type$i
		)
		fi
	;;
	esac
	if [ "X$image" != "X" ]; then
		bni=$(basename $image)
		if (( verbose )); then
			echo ifconfig $type$i group ${bni}. > /dev/stderr
		fi
		ifconfig $type$i group ${bni}.
	fi
	echo $type$i
}
alloc_usernet() {
	usernet[vlancount]="1"
}
alloc_bridge() {
	local _g _if name="$1"
	case "$name" in
	group:*)
		_g="${name#group:*}"
		# first bridge interface, incase something is wrong and we
		# have multiple interfaces matching the group name
		_if=$(ifconfig $_g 2>&1|awk -F: '/^[a-z]/{print $1;exit}')
		if ! [ "$_if" ]; then
			_if=$(alloc_if bridge)
			ifconfig $_if group $_g
		fi
		bridgeif[vlancount]=$_if
	;;
	*)
		bridgeif[vlancount]=$(alloc_if bridge)
		bridge[vlancount]="$name"
	;;
	esac
}

controller=""
controllercount=0
maxdisks=1
firstdisk=1
controllertype=ahci
iftype=none
alloc_disk_controller()
{
	local type=$1
	case "$type" in
	virtio*) ;;
	*)
		controller="dc$((controllercount++))"
		args="$args -device $type,id=$controller"
	;;
	esac
	case $type in
	ahci|isa-ide) maxdisks=4 dname=ide-drive iftype=none;;
	lsi53c895a) maxdisks=7 dname=scsi-disk iftype=none;;
	usb-storage) maxdisks=256 dname=usb-disk iftype=none;;
	virtio-blk-pci) maxdisks=256 dname=virtio-blk-pci iftype=virtio;;
	esac
}
alloc_disk() {
	local _dc=$((diskcount%maxdisks)) file="$1"
	local _ct=$controllertype
	if (( _dc == 0 )); then
		alloc_disk_controller $_ct
	fi

	args="$args -drive id=d$diskcount,file=$file,if=$iftype$ximg"
	case "$_ct" in
	virtio*) ;;
	*)
		args="$args -device $dname,drive=d$diskcount"
	;;
	esac
	case $_ct in
	ahci|isa-ide|ide|virtio)
		args="${args},bus=${controller}.$_dc"
	;;
	lsi53c895a)
		args="${args},bus=${controller}.0"
		args="${args},scsi-id=$_dc"
	;;
	usb-storage)
	;;
	esac
	((diskcount++))
}

random_mac() {
        local is_unique=0 mac="$1" _mac
        if [[ $mac != ??:??:??:??:??:?? ]]; then
		echo "FATAL: invald macaddr \"$mac\""
		exit 1
	fi
        until (( is_unique ))
        do
                _mac=$mac
                while [[ $_mac == *XX* ]]
                do
                        xx=${hexdig[$((RANDOM%16))]}${hexdig[$((RANDOM%16))]}
                        _mac=$(echo "$_mac" | sed "s/XX/$xx/")
                done
                [[ $(ifconfig;netstat -nr -f inet) != *" $_mac "* ]] && \
		    is_unique=1
        done
        echo $_mac
}

while getopts ':b:C:c:i:M:m:n:o:p:s:u:v' OPT
do
	case "$OPT" in
	b)
		root_check
		alloc_bridge "$OPTARG"
		fd[vlancount]="$tunfd"
		((tunfd++))
		((vlancount++))
	;;
	C) cds="$cds $OPTARG";;
	c) cds="$cds $OPTARG";cdboot=1;;
	i)
		[ "$image" ] || image="$OPTARG"
		images="$images $OPTARG"
	;;
	M)
		mode=$(echo "$OPTARG"|sed 's/:.*$//')
		machine=$(echo "$OPTARG"|sed -n '/:/{s/^[^:]*://;s/:.*$//;p;}')
		cpu=$(echo "$OPTARG"|sed -n '/^[^:][^:]*:.*:/{s/^.*://;p;}')
	;;
	m) memsize="-m $OPTARG";;
	n)
		root_check
		netcfg[vlancount]="$OPTARG"
		fd[vlancount]="$tunfd"
		((tunfd++))
		((vlancount++))
	;;
	p)
		tftpdir="$OPTARG"
		tftpimg="/pxeboot"
		alloc_usernet
		((vlancount++))
	;;
	s) imagesize="$OPTARG";;
	o)
		case "$OPTARG" in
		usernet*)
			echo "usernet OPT=$OPT OPTARG=$OPTARG"
			for pairs in $(echo "$OPTARG" | sed 's/,/ /g')
			do
				rhs=${pairs#*=}
				lhs=${pairs%%=*}
				echo "usernet lhs=$lhs rhs=$rhs"
				case "$lhs" in
				usernet)
					alloc_usernet
				;;
				model)
					model[vlancount]="$rhs"
				;;
				macaddr)
					macaddr[vlancount]=$(random_mac $rhs)
				;;
				*)
					echo "Oops, lhs=$lhs rhs=$rhs unsupported"
				;;
				esac
			done
			((vlancount++))
		;;
		bridge*) # bridge=ne0,model=rtl8139,macaddr=52:54:01:00:XX:XX
			root_check
			for pairs in $(echo "$OPTARG" | sed 's/,/ /g')
			do
				rhs=${pairs#*=}
				lhs=${pairs%%=*}
				case "$lhs" in
				bridge)
					alloc_bridge $rhs
				;;
				model)
					model[vlancount]="$rhs"
				;;
				macaddr)
					macaddr[vlancount]=$(random_mac $rhs)
				;;
				*)
					echo "Oops, lhs=$lhs rhs=$rhs unsupported"
				;;
				esac
			done
			fd[vlancount]="$tunfd"
			((tunfd++))
			((vlancount++))
		;;
		netcfg*) # netcfg=10.0.7.1/24,model=rtl8139,macaddr=52:54:01:00:XX:XX
			root_check
			for pairs in $(echo "$OPTARG" | sed 's/,/ /g')
			do
				rhs=${pairs#*=}
				lhs=${pairs%%=*}
				case "$lhs" in
				netcfg)
					netcfg[vlancount]="$rhs"
				;;
				model)
					model[vlancount]="$rhs"
				;;
				macaddr)
					macaddr[vlancount]=$(random_mac $rhs)
				;;
				*)
					echo "Oops, lhs=$lhs rhs=$rhs unsupported"
				;;
				esac
			done
			fd[vlancount]="$tunfd"
			((tunfd++))
			((vlancount++))
		;;
		console*) # console=[com0|vnc=:3],monitor=stdio,serial=unix
			# if specifying '-o console' clear system default
			console=""
			# do not specify multiple '-o console' last one will
			# clear earlier ones!
			for pairs in $(echo "$OPTARG" | sed 's/,/ /g;s/;/,/g')
			do
				rhs=${pairs#*=}
				lhs=${pairs%%=*}
				case "$lhs" in
				console)
					if [ "$rhs" = "com0" ]; then
						console="-parallel none -display none -vga none"
						console="-parallel none -display none"
						console="-nographic"
						continue
					fi
					if [[ "$rhs" == vnc* ]]; then
						console="-vnc ${rhs#*=}"
						continue
					fi
					echo "Oops, (console) lhs=$lhs rhs=$rhs unsupported"
					continue
				;;
				monitor)
					console="$console -monitor $rhs"
				;;
				serial)
					console="$console -serial $rhs"
				;;
				vnc)
					console="$console -vnc $rhs"
				;;
				*)
					echo "Oops, lhs=$lhs rhs=$rhs unsupported"
				;;
				esac
			done
		;;
		controllertype*) # controllertype=ahci
			for pairs in $(echo "$OPTARG" | sed 's/,/ /g')
			do
				rhs=${pairs#*=}
				lhs=${pairs%%=*}
				case "$lhs" in
				controllertype)
					case "$rhs" in
					isa-ide|ahci|lsi53c895a|scsi-hd|usb-storage|virtio-blk-pci);;
					*) echo "FATAL: lhs=$lhs rhs=$rhs unsupported"
					   exit 1
					;;
					esac
					controllertype="$rhs"
				;;
				*) echo "FATAL: lhs=$lhs rhs=$rhs unsupported"
					   exit 1
				;;
				esac
			done
		;;
		esac
	;;
	u)
		root_check
		user="$OPTARG"
	;;
	v) ((verbose++));;
	\?)
		echo "FATAL: Illegal option -$OPTARG"
		exit 1
	;;
	:)
		echo "FATAL: Missing argument for option -$OPTARG"
		exit 1
	;;
	*)
		echo "Unsupported option: -$OPT"
	;;
	esac
done
shift $((OPTIND-1))


if ! [ "$images" ]; then
	echo "WARNING: No drive image specified, use '-i foo.hda' for example"
fi

usbadd="-usb -device usb-tablet"
qemu="false"
mode=${mode:-i386}
case "$mode" in
amd64)
	qemu="qemu-system-x86_64"
	args="$args $usbadd -no-fd-bootchk"
	ahciboot=0
;;
alpha)
	qemu="qemu-system-alpha"
	ahciboot=0
;;
zaurus)
	qemu="qemu-system-arm -M spitz -portrait"
	args="$args $usbadd"
	ahciboot=0
;;
arm)
	qemu="qemu-system-arm"
	args="$args $usbadd"
	ahciboot=0
;;
i386)
	qemu="qemu-system-i386"
	args="$args $usbadd -no-fd-bootchk"
	ahciboot=0
;;
macppc)
	qemu="qemu-system-ppc -cpu G4"
	args="$args $usbadd"
	ahciboot=0
;;
sparc)
	qemu="qemu-system-sparc"
	ahciboot=0
;;
sparc64)
	qemu="qemu-system-sparc64 -machine sun4u,usb=off"
	# XXX fix "No 'usb-bus' found for device 'usb-tablet'"
	#args="$args $usbadd"
	args="$args -realtime mlock=off"
	args="$args -smp 1,sockets=1,cores=1,threads=1"
	args="$args -msg timestamp=on"
	args="$args -net nic,model=ne2k_pci -net user"
	ahciboot=0
;;
*)
	echo "unimplemented mode, $mode"
	exit 1
;;
esac
if [ "${cpu}" ]; then
	qemu="$qemu -cpu $cpu"
fi

# XXX for now, this presumes all cdrom files end in .iso and are raw

for cd in $cds
do
	if ! [ -e "$cd" ]; then
	    if [[ $cd == +(ftp|http)'://'* ]]; then
		cdtmpfile=$(mktemp /tmp/.qrun.cd.XXXXXXXXXX)
		trap 'rm $cdtmpfile' 0 1 15
		if ftp -o $cdtmpfile "$cd" > /dev/null 2>&1; then
			cd="$cdtmpfile"
		fi
	    fi
	fi
	if ! [ -e "$cd" ]; then
		echo "Do not know what to do with cd file $cd"
		continue
	fi
	xcd=",cache=none,media=cdrom"
	if [ -b "$cd" -o -c "$cd" ]; then
		xcd="$xcd,format=raw"
	else
		ext="$(perl -e '
			$a=$ARGV[0];
			if ($a =~ /^.*\.([^\.]+)$/){
				print lc($1);
			}' "$cd")"
		case "$ext" in
		qcow2) xcd="$xcd,format=qcow2";;
		raw)   xcd="$xcd,format=raw";;
		iso)   xcd="$xcd,format=raw";;
		*)
			echo "Unhandled extension: $ext"
			ftype="$(file "$cd")"
			case "$ftype" in
			*Qcow*) xcd="$xcd,format=qcow2";;
			*)
				echo "Unhandled ftype: _${ftype}_"
				xcd="$xcd,format=raw"
			;;
			esac
		;;
		esac
	fi
	args="$args -drive file=$cd,index=2$xcd"
done

for img in $images
do
	if ! [ -e "$img" ]; then
		if [ "${imagesize%T}" != "${imagesize}" ]; then
			xtra="-o cluster_size=2M"
		fi
		qemu-img create -f qcow2 $xtra $img $imagesize
	fi
	ximg=",cache=none"
	if [ -b "$img" -o -c "$img" ]; then
		ximg="$ximg,format=raw"
	else
		ext="$(perl -e '
			$a=$ARGV[0];
			if ($a =~ /^.*\.([^\.]+)$/){
				print lc($1);
			}' "$img")"
		case "$ext" in
		qcow2) ximg="$ximg,format=qcow2";;
		raw)   ximg="$ximg,format=raw";;
		iso)   ximg="$ximg,format=raw,media=cdrom";;
		*)
			echo "Unhandled extension: $ext"
			ftype="$(file "$img")"
			case "$ftype" in
			*Qcow*) ximg="$ximg,format=qcow2";;
			*)
				echo "Unhandled ftype: _${ftype}_"
				ximg="$ximg,format=raw"
			;;
			esac
		;;
		esac
	fi
	# ahci is not bootable on x86, so 1st must be ide
	if (( firstdisk == 1 && ahciboot == 0 )) && [ "$controllertype" = "ahci" ]; then
		args="$args -drive file=$img,index=0,media=disk$ximg"
		((firstdisk++))
	else
		# 32 is scsibus
		# 4 is observed
		alloc_disk "$img"
	fi
done
if [ "$cdboot" ]; then
	args="$args -boot once=d,order=c,menu=on"
fi

#args="$args -watchdog i6300esb"
#args="$args -watchdog ib700"
if [ "X$memsize" != "X" ]; then
	args="$args $memsize"
fi
vlan=0
while (( vlan < vlancount ))
do
	id=v$vlan
	if [ "${bridgeif[vlan]}" ]; then
		nicargs="nic,id=$id"
		devargs="tap,netdev=$id"
		if [ "${model[vlan]}" ]; then
			devargs="$devargs,model=${model[vlan]}"
		fi
		if [ "${macaddr[vlan]}" ]; then
			devargs="$devargs,macaddr=${macaddr[vlan]}"
		fi
		args="$args -netdev $nicargs -device $devargs,fd=${fd[vlan]}"

		tunif[vlan]=$(alloc_if tun)
		ifconfig ${tunif[vlan]} link0
		ifconfig ${tunif[vlan]} up

		ifconfig ${bridgeif[vlan]} add ${tunif[vlan]}
		if [ "${bridge[vlan]}" ]; then
			ifconfig ${bridgeif[vlan]} add ${bridge[vlan]}
		fi
		ifconfig ${bridgeif[vlan]} up
	fi
	if [ "${netcfg[vlan]}" ]; then
		nicargs="nic,id=$id"
		devargs="tap,netdev=$id"
		if [ "${model[vlan]}" ]; then
			devargs="$devargs,model=${model[vlan]}"
		fi
		if [ "${macaddr[vlan]}" ]; then
			devargs="$devargs,macaddr=${macaddr[vlan]}"
		fi
		args="$args -netdev $nicargs -device $devargs,fd=${fd[vlan]}"
		tunif[vlan]=$(alloc_if tun)
		ifconfig ${tunif[vlan]} link0
		ifconfig ${tunif[vlan]} ${netcfg[vlan]}
		ifconfig ${tunif[vlan]} up
	fi
	if [ "${usernet[vlan]}" ]; then
		nicargs="user,id=$id"
		mymodel=e1000
		if [ "${model[vlan]}" ]; then
			mymodel=${model[vlan]}
		else
			mymodel="virtio-net"
		fi
		devargs="$mymodel,netdev=$id"
		# macaddr is not a property of '-device virtio-net,...'
		if [ "$mymodel" != "virtio-net" ]; then
			if [ "${macaddr[vlan]}" ]; then
				devargs="$devargs,macaddr=${macaddr[vlan]}"
			fi
		fi
		# XXX calculate local port based on macaddr!
		#nicargs="$nicargs,hostfwd=tcp:[::1]:2022-:22"
		if [ "$tftpdir" ]; then
			devargs="$devargs,tftp=$tftpdir"
			#set -A nicmap n o p
			#args="$args -boot ${nicmap[vlan]}"
			args="$args -boot once=n,order=c,menu=on"
			args="$args -tftp $tftpdir"
			args="$args -bootp $tftpimg"
		fi
		if [ "$tftpimg" ]; then
			devargs="$devargs,bootfile=$tftpimg"
		fi
		args="$args -netdev $nicargs -device $devargs"
	fi
	((vlan++))
done

args="$args $console"
if [ "$machine" ]; then
	args="$args -M $machine"
fi

(( verbose>1 )) && set -x

rdrargs=""
if [ "$user" ]; then
	chown $user $images
	vlan=0
	while (( vlan < vlancount ))
	do
		if [ "${tunif[vlan]}" ]; then
			rdrargs="$rdrargs -f /dev/${tunif[vlan]}"
		fi
		((vlan++))
	done
	if (( verbose )); then
		echo "Starting: $qemu $args" "$@"
		$qemu -version
	fi
	fdpass -u $user $rdrargs $qemu $args "$@"
else
	vlan=0
	while (( vlan < vlancount ))
	do
		if [ "${tunif[vlan]}" ]; then
			rdrargs="$rdrargs $((vlan+3))<>/dev/${tunif[vlan]}"
		fi
		((vlan++))
	done
	if (( verbose )); then
		echo "Starting: $qemu $args" "$@" "$rdrargs"
		$qemu -version
	fi
	eval $qemu $args "$@" $rdrargs
fi
(( verbose )) && set +x

(
vlan=0
while (( vlan < vlancount ))
do
	if [ "${bridgeif[vlan]}" ]; then
		(( verbose )) && {
			ifconfig ${bridgeif[vlan]} > /dev/stderr
			ifconfig ${tunif[vlan]} > /dev/stderr
		}
		# wait until qemu exits, incase -daemonize is used, to cleanup
		while [[ $(/sbin/ifconfig ${tunif[vlan]}) == *'status: active'* ]]
		do
			sleep $((RANDOM%60+1))
		done
		ifconfig ${bridgeif[vlan]} del ${tunif[vlan]}
		(( verbose )) && ifconfig ${bridgeif[vlan]} > /dev/stderr
	fi

	if [ "${tunif[vlan]}" ]; then
		# wait until qemu exits, incase -daemonize is used, to cleanup
		while [ "$(fstat /dev/${tunif[vlan]}| grep -v "^USER")" ]
		do
			sleep $((RANDOM%60+1))
		done
		ifconfig ${tunif[vlan]} down
		ifconfig ${tunif[vlan]} destroy
	fi

	if [ "${bridgeif[vlan]}" ]; then
		# do not destroy a bridge unless there are no more members
		if ! [[ $(ifconfig ${bridgeif[vlan]}) == *'port '[1-9]* ]]
		then
			ifconfig ${bridgeif[vlan]} down
			ifconfig ${bridgeif[vlan]} destroy
		fi
	fi
	((vlan++))
done
)&
