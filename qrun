#!/bin/sh

# Copyright (c) 2010 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

imagesize="16G"
memsize=""
debug=0

while [ "$1" ]
do
	case "$1" in
	-imgsize) imagesize="$2"; shift;;
	-img) image="$2"; shift;;
	-bridge) bridge="$2"; shift;;
	-netcfg) netcfg="$2"; shift;;
	-cdboot) cd="$2";cdboot=1; shift;;
	-cd) cd="$2"; shift;;
	-mode) mode="$2"; shift;;
	-memsize) memsize="-m $2"; shift;;
	-u) user="$2"; shift;;
	-d) debug=1;;
	*) break;;
	esac
	shift
done

alloc_if() {
	local i=0 type=$1
	while ! ifconfig $type$i create > /dev/null 2>&1
	do
		let i=i+1
	done
	echo $type$i
}

if ! [ "$image" ]; then
	echo "No hard drive image specified, use '-img foo.hda' for example"
	exit 1
fi

if ! [ -f "$image" ]; then
	qemu-img create -f qcow2 $image $imagesize
fi

if [ "$netcfg" -a "$bridge" ]; then
	echo "Impossible, mixing routing and bridging"
	exit 1
fi

args=""

if [ "$cd" -a -f "$cd" ]; then
	args="$args -cdrom $cd"
fi
if [ "$cdboot" ]; then
	args="$args -boot d"
fi

args="$args -hda $image -no-fd-bootchk"
args="$args -monitor stdio"
if [ "$bridge" ]; then
	args="$args -net nic -net tap,fd=3"

	bridgeif=$(alloc_if bridge)

	tunif=$(alloc_if tun)
	ifconfig $tunif link0
	ifconfig $tunif up

	ifconfig $bridgeif add $tunif
	ifconfig $bridgeif add $bridge
	ifconfig $bridgeif up
else
	if [ "$netcfg" ]; then
		tunif=$(alloc_if tun)
		ifconfig $tunif link0
		ifconfig $tunif $netcfg
		ifconfig $tunif up
	fi
fi
qemu="qemu"
if [ "$mode" ]; then
	case "$mode" in
	amd64) qemu="qemu-system-x86_64";;
	esac
fi

if [ debug -gt 0 ]; then
	echo "=> $qemu $args"
fi

if [ "$user" ]; then
	if [ "$tunif" ]; then
		fdpass -u $user -f /dev/$tunif $qemu $args
	else
		fdpass -u $user $qemu $args
	fi
else
	if [ "$tunif" ]; then
		$qemu $args 3<>/dev/$tunif
	else
		$qemu $args
	fi
fi

if [ "$bridgeif" ]; then
	ifconfig $bridgeif delete $tunif
fi

if [ "$tunif" ]; then
	ifconfig $tunif down
	ifconfig $tunif destroy
fi

if [ "$bridgeif" ]; then
	ifconfig $bridgeif down
	ifconfig $bridgeif destroy
fi
